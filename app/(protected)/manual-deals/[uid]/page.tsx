import React from "react";

import {
  Check,
  CreditCard,
  Cross,
  DollarSignIcon,
  Handshake,
  Hash,
  MapPinIcon,
  MinusCircle,
  Tag,
  Edit,
  ExternalLink,
  WebhookIcon,
} from "lucide-react";
import Link from "next/link";

import path from "path";
import * as fs from "fs/promises";
import { Metadata } from "next";
import { MdOutlineNumbers } from "react-icons/md";
import {
  fetchSpecificInferredDeal,
  fetchSpecificManualDeal,
} from "@/lib/firebase/db";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import PreviousPageButton from "@/components/PreviousPageButton";

type Params = Promise<{ uid: string }>;

export async function generateMetadata({
  params,
}: {
  params: Params;
}): Promise<Metadata> {
  const { uid } = await params;

  try {
    const fetchedDeal = await fetchSpecificManualDeal(uid);
    return {
      title: fetchedDeal?.title || "Dark Alpha Capital",
      description: fetchedDeal?.main_content || "Generated by create next app",
    };
  } catch (error) {
    return {
      title: "Not Found",
      description: "The page you are looking for does not exist",
    };
  }
}

const ManualDealSpecificPage = async ({ params }: { params: Params }) => {
  const { uid } = await params;

  const fetchedDeal = await fetchSpecificManualDeal(uid);

  if (!fetchedDeal) {
    return (
      <section className="mt-10 text-center text-xl">Deal not found</section>
    );
  }

  const {
    id,
    first_name,
    last_name,
    direct_phone,
    work_phone,
    title,
    cashFlow,
    under_contract,
    revenue,
    source,
    ebitda,
    link,
    grossRevenue,
    inventory,
    scraped_by,
    asking_price,
    listing_code,
    state,
    category,
    status,
    main_content,
    explanation,
  } = fetchedDeal;

  return (
    <section className="block-space big-container relative">
      <div className="absolute left-8 top-6">
        <PreviousPageButton />
      </div>

      <div className="narrow-container mb-8 md:mb-10 lg:mb-12">
        <div className="mx-auto text-center">
          <Badge className="mb-4">Manual Deal</Badge>
        </div>
        <h1 className="mb-4 text-center text-4xl font-bold text-gray-900">
          Deal Overview: {title}
        </h1>

        <p className="text-pretty text-center text-lg leading-relaxed text-gray-600">
          You are viewing detailed information about the {category} deal titled{" "}
          <strong>{title}</strong>. This deal is currently{" "}
          <span className="font-semibold">{status || "unchecked"}</span>. Below,
          you will find key details such as the deal&apos;s revenue, asking
          price, location, and other relevant metrics. Use this information to
          make an informed decision, and feel free to screen the deal with our
          AI tool to get further insights.
        </p>
        <div className="mt-4 flex w-full flex-col justify-around gap-4 md:w-auto md:flex-row md:items-center">
          <Button asChild className="w-full md:w-auto">
            <Link href={`/manual-deals/${uid}/edit`}>
              <Edit className="mr-2 h-4 w-4" /> Edit Deal
            </Link>
          </Button>

          {link && (
            <Button asChild variant="outline" className="w-full md:w-auto">
              <Link href={link}>
                <ExternalLink className="mr-2 h-4 w-4" />
                Visit Website
              </Link>
            </Button>
          )}
        </div>
      </div>

      <div className="container grid grid-cols-1 gap-4 md:grid-cols-2">
        <Card className="relative overflow-hidden bg-muted transition-all duration-300 hover:shadow-lg">
          <CardHeader className="pb-2">
            <CardTitle className="text-2xl font-bold">{title}</CardTitle>
          </CardHeader>

          <CardContent className="pb-2">
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                {status === "Approved" ? (
                  <div>
                    <Badge className="bg-green-800">Approved</Badge>
                  </div>
                ) : status === "Rejected" ? (
                  <div>
                    <Cross className="mr-2 h-5 w-5 text-red-500" />
                    <Badge variant="destructive">Rejected</Badge>
                  </div>
                ) : (
                  <div>
                    <MinusCircle className="mr-2 h-5 w-5" />
                    <Badge variant="secondary">Unchecked</Badge>
                  </div>
                )}
              </div>

              {id && (
                <div className="flex items-center gap-2">
                  <MdOutlineNumbers className="mr-2 h-5 w-5" />
                  <span className="font-medium">Deal ID:</span>
                  <span className="ml-2">{id}</span>
                </div>
              )}

              {first_name && (
                <div className="flex items-center gap-2">
                  <Tag className="mr-2 h-5 w-5" />
                  <span className="font-medium">First Name:</span>
                  <span className="ml-2">{first_name}</span>
                </div>
              )}

              {last_name && (
                <div className="flex items-center gap-2">
                  <Tag className="mr-2 h-5 w-5" />
                  <span className="font-medium">Last Name:</span>
                  <span className="ml-2">{last_name}</span>
                </div>
              )}

              {direct_phone && (
                <div className="flex items-center gap-2">
                  <Tag className="mr-2 h-5 w-5" />
                  <span className="font-medium">Direct Phone:</span>
                  <span className="ml-2">{direct_phone}</span>
                </div>
              )}

              {work_phone && (
                <div className="flex items-center gap-2">
                  <Tag className="mr-2 h-5 w-5" />
                  <span className="font-medium">Work Phone:</span>
                  <span className="ml-2">{work_phone}</span>
                </div>
              )}

              {cashFlow && (
                <div className="flex items-center gap-2">
                  <Tag className="mr-2 h-5 w-5" />
                  <span className="font-medium">Cash Flow:</span>
                  <span className="ml-2">{cashFlow}</span>
                </div>
              )}

              {ebitda && (
                <div className="flex items-center gap-2">
                  <Tag className="mr-2 h-5 w-5" />
                  <span className="font-medium">Ebitda:</span>
                  <span className="ml-2">{ebitda}</span>
                </div>
              )}

              {category && (
                <div className="flex items-center gap-2">
                  <Tag className="mr-2 h-5 w-5" />
                  <span className="font-medium">Category:</span>
                  <span className="ml-2">{category}</span>
                </div>
              )}

              {grossRevenue && (
                <div className="flex items-center gap-2">
                  <Tag className="mr-2 h-5 w-5" />
                  <span className="font-medium">Gross Revenue:</span>
                  <span className="ml-2">{grossRevenue}</span>
                </div>
              )}

              {inventory && (
                <div className="flex items-center gap-2">
                  <Tag className="mr-2 h-5 w-5" />
                  <span className="font-medium">Inventory:</span>
                  <span className="ml-2">{inventory}</span>
                </div>
              )}

              {source && (
                <div className="flex items-center gap-2">
                  <WebhookIcon className="mr-2 h-5 w-5" />
                  <span className="font-medium">Source:</span>
                  <span className="ml-2">{source}</span>
                </div>
              )}

              {revenue && (
                <div className="flex items-center gap-2">
                  <DollarSignIcon className="mr-2 h-5 w-5" />
                  <span className="font-medium">Revenue:</span>
                  <span className="ml-2">{revenue}</span>
                </div>
              )}

              {under_contract && (
                <div className="flex items-center gap-2">
                  <Handshake className="mr-2 h-5 w-5" />
                  <span className="font-medium">Under Contract:</span>
                  <span className="ml-2">{under_contract}</span>
                </div>
              )}

              {listing_code && (
                <div className="flex items-center gap-2">
                  <Hash className="mr-2 h-5 w-5" />
                  <span className="font-medium">Listing Code:</span>
                  <span className="ml-2">{listing_code}</span>
                </div>
              )}

              {state && (
                <div className="flex items-center gap-2">
                  <MapPinIcon className="mr-2 h-5 w-5" />
                  <span className="font-medium">Location:</span>
                  <span className="ml-2">{state}</span>
                </div>
              )}

              {asking_price && (
                <div className="flex items-center gap-2">
                  <CreditCard className="mr-2 h-5 w-5" />
                  <span className="font-medium">Asking Price:</span>
                  <span className="ml-2">{asking_price}</span>
                </div>
              )}

              {scraped_by && (
                <div className="flex items-center gap-2">
                  <CreditCard className="mr-2 h-5 w-5" />
                  <span className="font-medium">Scraped By:</span>
                  <span className="ml-2">{scraped_by}</span>
                </div>
              )}
            </div>
            <h3 className="my-4 underline">Deal Teaser</h3>
            <p className="whitespace-pre-wrap">{main_content}</p>
          </CardContent>

          <CardFooter className="flex flex-col gap-4"></CardFooter>
        </Card>
        <Card className="relative h-fit overflow-hidden bg-muted transition-all duration-300 hover:shadow-lg">
          <CardHeader className="pb-2">
            <CardTitle className="text-2xl font-bold text-gray-900">
              AI Reasoning
            </CardTitle>
          </CardHeader>

          <CardContent className="pb-2">
            <div className="mt-4 whitespace-pre-wrap">
              {explanation ? (
                <div>{explanation}</div>
              ) : (
                <div className="flex flex-col items-center justify-center space-y-4 text-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-16 w-16 text-gray-400"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M12 8v4m0 4h.01M19 12a7 7 0 11-14 0 7 7 0 0114 0z"
                    />
                  </svg>
                  <h3 className="text-lg font-semibold text-gray-600">
                    No explanation available at the moment.
                  </h3>
                  <span className="text-gray-500">
                    You can provide additional details or review the deal for
                    further information.
                  </span>
                </div>
              )}
            </div>
          </CardContent>

          <CardFooter className="flex flex-col gap-4"></CardFooter>
        </Card>
      </div>
    </section>
  );
};

export default ManualDealSpecificPage;
